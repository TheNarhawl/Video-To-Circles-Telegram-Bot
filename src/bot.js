import { Telegraf } from 'telegraf';
import ffmpeg from 'fluent-ffmpeg';
import ffmpegPath from 'ffmpeg-static';
import fs from 'fs';
import { dirname, resolve } from 'path';
import { fileURLToPath } from 'url';
import fetch from 'node-fetch';
import { config } from 'dotenv';
config({ path: './.env' });


const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

ffmpeg.setFfmpegPath(ffmpegPath);

const bot = new Telegraf(process.env.BOT_TOKEN, {});

bot.telegram.setMyCommands([
  { command: '/start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É' },
  { command: '/help', description: '–ü–æ–º–æ—â—å & –°–≤—è–∑—å —Å –∞–≤—Ç–æ—Ä–æ–º' },
]);


bot.command('start', async (ctx) => {
  await ctx.react('üçå');
  await ctx.reply(
    '–ü—Ä–∏–≤–µ—Ç! üëã\n\n–Ø - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ –≤ <b>–∫—Ä—É–∂–æ—á–∫–∏ Telegram.</b>\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –≤–∏–¥–µ–æ –ª—é–±–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ <b>–≤–µ—Å–æ–º –º–µ–Ω–µ–µ 100–ú–±–∞–π—Ç</b>',
    {
      parse_mode: "HTML",
    });

});


bot.command('help', async (ctx) => {
  await ctx.react('üçå');
  await ctx.reply(
    'üìß <b>–°–≤—è–∑—å —Å –∞–≤—Ç–æ—Ä–æ–º:</b> @Narhawl\n\nüñä <b>–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞:</b> <a href="https://github.com/TheNarhawl/Video-To-Circles-Telegram-Bot">GitHub</a>',
    {
      parse_mode: "HTML",
      disable_web_page_preview: true
    });

});


let isProcessing = false;

bot.on('video', async (ctx) => {

  await ctx.react('üçå');
  let statusMessage;

  if (isProcessing) {
    await ctx.reply('‚ùó <b>–ë–æ—Ç —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ —Ç–µ–∫—É—â–µ–µ –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ! </b>',
      {
        parse_mode: 'HTML'
      }
    );
    return;
  }

  isProcessing = true;

  try {
    statusMessage = await ctx.reply(`–í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ! üìù\n\n<b>–û–±—Ä–∞–±–æ—Ç–∫–∞ . . .</b>`,
      {
        parse_mode: "HTML"
      });


    const videoFileId = ctx.message.video.file_id;
    const videoDuration = ctx.message.video.duration;
    const videoSize = ctx.message.video.file_size;
    const isTooLong = videoDuration > 60;

    await ctx.replyWithChatAction('record_video');

    if (videoSize > 100 * 1024 * 1024) {
      await ctx.telegram.editMessageText(
        ctx.chat.id,
        statusMessage.message_id,
        null,
        '–í–∞—à–µ –≤–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (–±–æ–ª—å—à–µ 100 MB) ‚ùå\n\n<b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å –æ–±—ä—ë–º –∏ –ø—Ä–∏—Å–ª–∞—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞.</b>',
        {
          parse_mode: "HTML"
        }
      );
      return;
    }

    const videoPath = resolve(__dirname, 'temp_video.mp4');
    const outputPath = resolve(__dirname, 'circle_video.mp4');

    const fileUrl = await ctx.telegram.getFileLink(videoFileId);
    const res = await fetch(fileUrl);

    if (!res.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞');
    }

    const fileStream = fs.createWriteStream(videoPath);
    res.body.pipe(fileStream);

    await new Promise((resolve, reject) => {
      res.body.on('end', resolve);
      res.body.on('error', reject);
    });

    await ctx.replyWithChatAction('upload_video');

    await new Promise((resolve, reject) => {
      const ffmpegCommand = ffmpeg(videoPath)
        .output(outputPath)
        .videoFilter([
          'crop=\'min(iw\\,ih)\':\'min(iw\\,ih)\'',
          'scale=240:240'
        ])
        .outputOptions([
          '-preset ultrafast',
          '-threads 8',
          '-crf 18',
          '-c:v libx264',
        ]);

      if (isTooLong) {
        console.log('–í–∏–¥–µ–æ –¥–ª–∏—Ç—Å—è –±–æ–ª—å—à–µ 60 —Å–µ–∫—É–Ω–¥, –æ–±—Ä–µ–∑–∞–µ–º –¥–æ 60 —Å–µ–∫—É–Ω–¥.');
        ffmpegCommand.setDuration(60);

        ctx.telegram.editMessageText(
          ctx.chat.id,
          statusMessage.message_id,
          null,
          '–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!\n\n<b>–û–Ω–æ –±—É–¥–µ—Ç –æ–±—Ä–µ–∑–∞–Ω–æ –¥–æ 60 —Å–µ–∫—É–Ω–¥ . . .</b>',
          {
            parse_mode: "HTML"
          }
        );
      }

      ffmpegCommand
        .on('end', () => {
          console.log('–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');

          ctx.replyWithChatAction('record_video');

          resolve();
        })
        .on('error', (err, stdout, stderr) => {
          console.error('–û—à–∏–±–∫–∞ FFmpeg:', err);
          console.error('FFmpeg stdout:', stdout);
          console.error('FFmpeg stderr:', stderr);
          reject(err);
        })
        .on('start', (commandLine) => {
          console.log('–ó–∞–ø—É—Å–∫ FFmpeg —Å –∫–æ–º–∞–Ω–¥–æ–π:', commandLine);
        })
        .run();
    });

    await ctx.telegram.editMessageText(
      ctx.chat.id,
      statusMessage.message_id,
      null,
      '–í–∏–¥–µ–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!\n\n<b>–û—Ç–ø—Ä–∞–≤–∫–∞ . . .</b>',
      {
        parse_mode: "HTML"
      }
    );

    await ctx.replyWithVideoNote({ source: outputPath }, {
      reply_to_message_id: ctx.message.message_id,
    });

    await ctx.telegram.editMessageText(
      ctx.chat.id,
      statusMessage.message_id,
      null,
      '–ì–æ—Ç–æ–≤–æ! ‚úÖ\n\n<b>–í–∞—à –∫—Ä—É–∂–æ–∫: </b>',
      {
        parse_mode: 'HTML'
      }
    );

    fs.unlinkSync(videoPath);
    fs.unlinkSync(outputPath);
  }
  catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ:', error);
    await ctx.telegram.editMessageText(
      ctx.chat.id,
      statusMessage.message_id,
      null,
      '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ! ‚ùå\n\n<b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.</b>',
      {
        parse_mode: 'HTML'
      }
    );
  } finally {
    isProcessing = false;
  }
});

bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`Error while handling update ${ctx.update.update_id}:`);

})

bot.launch()
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));